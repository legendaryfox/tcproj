	<% if (hour_num >= 0 && hour_num <= 8) || (hour_num >= 18 && hour_num <= 23) %>
		<% if hour_num == 0 %>
			<tr>
				<td colspan="8">Show Morning Times</td>
			</tr>
		<% end %>
		
		<% if hour_num == 18 %>
			<tr>
				<td colspan="8">Show Evening Times</td>
			</tr>
		<% end %>
		<tr style="display:none">
	<% else %>
		<tr>
	<% end %>
	
	<% hour_key = "hour#{hour_num}" %>
		<td><%= hour_num %></td>
		<% ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"].each do |day_of_week| %>
		<td><%= @participation[day_of_week][hour_key] == "1" ? "Yes" : " " %></td>
	<% end %>
	</tr>



SUBSCRIPTIONS
:user, :cbo
-a follower relationship
-mailing list
-etc

Participation
:user, :cbo, <times and dates>
-can only submit one at a time
-if user has applied, only then can CBO look at user information

PROCESS:
-user logs in
-user goes to CBO page
-user fills out chart
-user submits chart
-cbo recieves chart
-? ACCEPT, REJECT, NEED MORE INFO
--(ACCEPT): alert CBO to send applcation to user [<---automate based on an uploaded application???]. mark as accept
--(REJECT): delete the application. send message.
--(MORE INFO): cbo can fill in message. send message. keep marked as pending.



BACKUP

	
	<%= participation_form.fields_for :monday, do |monday_form| %>
	
		<% (0..23).each do |hour| %>
			<%= check_box_tag "participation[monday][#{hour}]", @participation.monday[hour] == 1 ? "1" : "0", @participation.monday[hour] == 1 ? true : false %>
		<% end %>
	
	<% end %>
	
	<hr />
	
	<%= participation_form.fields_for :monday , do |monday_form| %>
	
		<% (0..23).each do |hour| %>
			<%= check_box_tag "participation[#{:monday.to_s}][#{hour}]", @participation[:monday][hour] == 1 ? "1" : "0", @participation[:monday][hour] == 1 ? true : false %>
		<% end %>
	
	<% end %>
	


END
PLAN OF ATTACK:
-PARTICIPATION = :user, :cbo, :status, (:monday, :tuesday, :wednesday, etc...)



FIRST, SUBSCRIPTIONS.
-integrate follower/following between cbo and user
-pull out all membership references and code; use follower/following



NEW MEMBERSHIPS + FOLLOWERS
--erase current membership model?



-clean up memberships
--add option to view qresponse to cbos/user_memberships_table
--make select-list dynamic
--user perspective
--stronger coupling with qresponse?


-questionnaires
--correct integration with memberships
--admin panels?

//-Home page map - default to Boston, add dynamic map location, add markers for CBOs (static, then dynamic)
-applications - approval process = membership
-photo upload

not requested
-messaging/emailing to all members of a CBO?
-inline editing?


Hi Josh,

As we discussed, user signup, we ask the user four core questions that every CBO. Do you have anything in mind what the specific questions should be?

When the user first logs in, there is an intro page of sorts. There's 3 sections: 'Local Community', 'CBOs', 'You'. Can you write a short paragraph blurb for each of them? You can login to the site to see what they currently are if you want.

Also, will the CBOs you listed below be given access to the site as well?

Josiah


One CBO has_one quesitonnaire
one questionnaire has_many responses
one user has_many responses
one response has_one questionnaire

.'.

A user has_many questionnaires through responses
a questionnaire has_many users through responses
each response has...question1_answer, question2_answer, etc.... + flag_level; notes_field (changeable by admin and CBO)
-flag_level: 0 is pending TCP Admin, 1 is pending CBO admin, 2 is accepted, 3 is rejected



CBO signs up
Creates a default questionnaire

Each time questionnaire is changed, 

Each time a response is


A CBO creates an opportunity
An opportunity always has a questionnaire attached to it
-the questionnaire always has the 'core questions'
--when a user fills out the questionnaire, the core question answers are autofilled from the user's preferences
-it may have additional questions attached to it
=> we know that a questionnaire will have at least X questions
-when a user fills out the q

PART I: FINISH OPPORTUNITIES
-implement ability for CBOs to create opportunities
-implement more information into opportunities
--date(s), general description, etc

PART II: CREATE QUESTIONNAIRES
-questionnaires belong to CBOs; opportunities can reference questionnaires
--strongly advise against editing a published questionnaire
-opportunity has at most only one questionnaire; a questionnaire can be used for multiple opportunities
-a questionnaire response (qresponse) - flat text file??

PART III: Users applying via questionnaires

Model: Community
-anyone (CBO, student) can join
-has its own location, and its own set of CBOs/users
--good for caching later on
--although, maybe this is better added to Seeds. Iuno.

NEED to generate two :through join relations for belonging Users to communities and CBOs to communities...ugh.


Add a default distance to scope the community's "jurisdiction"

-"Post to Community" - user or cbo can write a short message, post to a community; a post has_many communities and a community has_many posts

-to deal with admin viewing, give them proxy users and proxy cbos

Dec 2 2011 Refactoring:
authentication

verification

display clean up + tidying
-BannerBranding link
-homepage = what?
-users/:id
-userprofile/cboprofile
-User listing
-my CBOs
-community page
-new communities
-code organization + commenting
-DRY
-routing

partials

misc
-seed more communities
-seed more CBOs?
-seed more users
-add default joins

opportunity
name
description
location
:cbo:
:questionnaire:



A cbo has many opportunities
An opportunity has one CBO
Cbo (one to many) opportunities

a user has many opportunities
an opportunity has many users
A user (many to many) opportunity

an opportunity has one questionnaire
a questionnaire has one opportunity
an opportunity (one to one) questionnaire

a questionnaire has many responses
a response has one questionnaire
a questionnaire (one to many) responses

a (specific) response has one user
a user has one (specific) response
a (specific) response (one to one) user

